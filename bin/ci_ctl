#!/bin/sh

#
#  ci_ctl - A control program to orchestrate an experiment in running a containerized Jenkins instance
#
#  Usage:
#
#         
#         ci_ctl build && \
#         ci_ctl launch
#
#         And optionally start the Postgres database:
#  
#         ci_ctl start_pg_instance
#         ci_ctl create_audit_events_table
#
#  The purpose of this exercise is to launch a customized instance of Jenkins via Docker/Openshift.
#  The openshift/jenkins:2 enables plugins and configuration files to be staged in /opt/openshift and
#  loaded into the master at startup.  This image also contains the Kubernetes plugin pre-configured
#  for an Openshift cluster.
#
#  The openshift/jenkins:2 also runs in standalone Docker-engine.  Some of the customizations prototyped here include:
#
#      - The ability to call a shared library named auditEvent() in Groovy which inserts audit events from a Pipeline job
#           into a Postres database
#
#      - A packaged Python program (python_pg_client) which acts as a client to the Postgres database, which can be called from
#           a Pipeline job or a shared library
#
#  
#
#


#
# Start a Postgres instance in an container to contain audit log events
#
start_pg_instance() {
  if [ `docker --version | grep Docker | grep -i version | wc -c ` -lt 10 ]; then
    echo "[`basename "$0"`]: start_pg_instance(): ERROR: Docker is not installed (exiting)"
    exit 1
  fi

  if [ `docker ps -f name=pg01 | grep Up | wc -c` -gt 10 ]; then
    echo "[`basename "$0"`]: start_pg_instance(): WARNING: Postgres is started (skipping)"
    return
  fi

  # Start a postgres instance, with the data directory on the EC2 Docker host
  if [ ! -r /home/ec2-user/pgdata ]; then
    mkdir /home/ec2-user/pgdata
  fi
  chmod ugo+rx /home/ec2-user
  chmod ugo+rwx /home/ec2-user/pgdata
  docker run -it --rm \
           --name pg01 \
           -e POSTGRES_PASSWORD=0000 \
           -e PGDATA=/var/pgdata \
           -e POSTGRES_DB=audit_events \
           -v /home/ec2-user/pgdata:/var/pgdata \
           -v /home/ec2-user/CI:/ciproject \
           -h postgres_host \
           -d postgres
}

#
# Create the audit event database in Postgres
#
create_audit_events_database() {
  docker run -it --name postgres_cmd --rm --link pg01:postgres_host -v /home/ec2-user/CI:/ci \
               -e PGPASSWORD=0000 \
               postgres psql -h postgres_host -U postgres -f /ci/ddl/create_audit_database.ddl
  docker run -it --name postgres_cmd --rm --link pg01:postgres_host -v /home/ec2-user/CI:/ci \
               -e PGPASSWORD=ciuser \
               postgres psql -h postgres_host --dbname=audit  -U ciuser -f /ci/ddl/create_audit_tables.ddl
}

#
# Test the audit event database in Postgres
#
test_audit_events_database() {
  echo "INSERT INTO audit_events (event_datetime, event_name) VALUES ('`date`', '`date '+%s'`');" >> ddl/tmp.sql
  echo "INSERT INTO audit_events (event_datetime, event_name) VALUES ('`date`', '`date '+%s'`');" >> ddl/tmp.sql
  echo "INSERT INTO audit_events (event_datetime, event_name) VALUES ('`date '+%s'`', '`date '+%s'`');" >> ddl/tmp.sql
  docker run -it --name postgres_cmd --rm --link pg01:postgres_host -v /home/ec2-user/CI:/ci \
               -e PGPASSWORD=ciuser postgres psql -h postgres_host --dbname=audit -U ciuser -f /ci/ddl/tmp.sql
  rm ./ddl/tmp.sql
  docker run -it --name postgres_cmd --rm --link pg01:postgres_host -v /home/ec2-user/CI:/ci \
               -e PGPASSWORD=ciuser postgres psql -h postgres_host --dbname=audit -U ciuser -c "SELECT * FROM audit_events"
}

#
#  Launch the customized Jenkins instance in Docker-engine
#
launch_openshift_image() {
  # Build the current image if it's not in the local registry.
  current_image_version=`grep version images/openshift/jenkins-master/Dockerfile | awk '{print $2} | sed 's/"//g'`
  if [ `docker images | grep ci_jenkins | grep $current_image_version | wc -c` -lt 2 ]; then
    echo build_openshift_image
  fi
  exit 1
  # Create a directory mapping for the jenkins-data volume
  sudo mkdir /var/lib/jenkins 2>/dev/null && sudo chmod ugo+rwx /var/lib/jenkins

  # Launch and expose the web UI
  ip_address=`hostname -I | awk '{print $1}'`
  docker run -it --rm --name jenkins01 -d \
                -p $ip_address:8443:8443 \
                -p $ip_address:8080:8080 \
                -v /var/lib/jenkins:/var/lib/jenkins \
                --env JENKINS_PASSWORD=0000 \
                --env OPENSHIFT_ENABLE_OAUTH=false \
                --env PGPASSWORD=0000 \
                --link pg01:postgres_host \
                ci_jenkins:2018_12a

   #  --link pg01:postgres \ -v/home/ec2-user/CI:/home/ec2-user/CI
    docker logs -f jenkins01
}

build_openshift_image() {
  image_version=`grep version images/openshift/jenkins-master/Dockerfile | awk '{print $2}' | cut -f2 -d= | sed 's/\"//g'`
  echo "Building ci_jenkins:$image_version"
  ln -s images/openshift/jenkins-master/Dockerfile ./Dockerfile
  docker build -t ci_jenkins:$image_version .
  rm ./Dockerfile
}

build() {
  build_openshift_image
}

launch() {
  launch_openshift_image
}

connect() {
  docker exec -it -u 0 jenkins01 bash
}

main() {
  if [ $# -gt 0 ]; then
    $@
    exit 1
  fi
}

main $@
